//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Accounting
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AccountingEntities : DbContext
    {
        public AccountingEntities()
            : base("name=AccountingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActivityLogger> ActivityLoggers { get; set; }
        public virtual DbSet<AccountStatu> AccountStatus { get; set; }
        public virtual DbSet<AccountType> AccountTypes { get; set; }
        public virtual DbSet<Chartofaccountsdetail> Chartofaccountsdetails { get; set; }
        public virtual DbSet<Journalparent> Journalparents { get; set; }
        public virtual DbSet<CurrencyRate> CurrencyRates { get; set; }
        public virtual DbSet<Sector> Sectors { get; set; }
        public virtual DbSet<Vouchertype> Vouchertypes { get; set; }
        public virtual DbSet<Cashdistribution> Cashdistributions { get; set; }
        public virtual DbSet<description> descriptions { get; set; }
        public virtual DbSet<Costcenter> Costcenters { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<Chartofaccount> Chartofaccounts { get; set; }
        public virtual DbSet<TrialBalance1> TrialBalance1 { get; set; }
        public virtual DbSet<Journalchild> Journalchilds { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Bankreconciliation> Bankreconciliations { get; set; }
        public virtual DbSet<Installment> Installments { get; set; }
    
        [DbFunction("AccountingEntities", "vChartOfAccounts")]
        public virtual IQueryable<vChartOfAccounts> vChartOfAccounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<vChartOfAccounts>("[AccountingEntities].[vChartOfAccounts]()");
        }
    
        public virtual ObjectResult<Collect> Collect(string phase, Nullable<int> acc, Nullable<int> status)
        {
            var phaseParameter = phase != null ?
                new ObjectParameter("phase", phase) :
                new ObjectParameter("phase", typeof(string));
    
            var accParameter = acc.HasValue ?
                new ObjectParameter("acc", acc) :
                new ObjectParameter("acc", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Collect>("Collect", phaseParameter, accParameter, statusParameter);
        }
    
        public virtual int PostUnpostVouchers(Nullable<bool> isPosted, Nullable<int> year, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> type, Nullable<int> fromReference, Nullable<int> toReference, Nullable<int> sC)
        {
            var isPostedParameter = isPosted.HasValue ?
                new ObjectParameter("IsPosted", isPosted) :
                new ObjectParameter("IsPosted", typeof(bool));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var fromReferenceParameter = fromReference.HasValue ?
                new ObjectParameter("FromReference", fromReference) :
                new ObjectParameter("FromReference", typeof(int));
    
            var toReferenceParameter = toReference.HasValue ?
                new ObjectParameter("ToReference", toReference) :
                new ObjectParameter("ToReference", typeof(int));
    
            var sCParameter = sC.HasValue ?
                new ObjectParameter("SC", sC) :
                new ObjectParameter("SC", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PostUnpostVouchers", isPostedParameter, yearParameter, fromDateParameter, toDateParameter, typeParameter, fromReferenceParameter, toReferenceParameter, sCParameter);
        }
    
        public virtual ObjectResult<CheckerDescription> CheckerDescription(Nullable<int> type, Nullable<int> year)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckerDescription>("CheckerDescription", typeParameter, yearParameter);
        }
    
        public virtual ObjectResult<CheckerMaturity> CheckerMaturity(Nullable<int> accountid, Nullable<int> typeid, Nullable<int> year)
        {
            var accountidParameter = accountid.HasValue ?
                new ObjectParameter("Accountid", accountid) :
                new ObjectParameter("Accountid", typeof(int));
    
            var typeidParameter = typeid.HasValue ?
                new ObjectParameter("Typeid", typeid) :
                new ObjectParameter("Typeid", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckerMaturity>("CheckerMaturity", accountidParameter, typeidParameter, yearParameter);
        }
    
        public virtual ObjectResult<CheckerCurrencies> CheckerCurrencies(Nullable<int> accountid, Nullable<int> typeid, Nullable<int> year)
        {
            var accountidParameter = accountid.HasValue ?
                new ObjectParameter("Accountid", accountid) :
                new ObjectParameter("Accountid", typeof(int));
    
            var typeidParameter = typeid.HasValue ?
                new ObjectParameter("Typeid", typeid) :
                new ObjectParameter("Typeid", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckerCurrencies>("CheckerCurrencies", accountidParameter, typeidParameter, yearParameter);
        }
    
        public virtual ObjectResult<CheckerEditedDate> CheckerEditedDate(Nullable<int> accountid, Nullable<int> typeid, Nullable<int> userid, Nullable<int> amount, Nullable<int> year)
        {
            var accountidParameter = accountid.HasValue ?
                new ObjectParameter("Accountid", accountid) :
                new ObjectParameter("Accountid", typeof(int));
    
            var typeidParameter = typeid.HasValue ?
                new ObjectParameter("Typeid", typeid) :
                new ObjectParameter("Typeid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckerEditedDate>("CheckerEditedDate", accountidParameter, typeidParameter, useridParameter, amountParameter, yearParameter);
        }
    
        public virtual int fillLookups(string source, string destination)
        {
            var sourceParameter = source != null ?
                new ObjectParameter("source", source) :
                new ObjectParameter("source", typeof(string));
    
            var destinationParameter = destination != null ?
                new ObjectParameter("destination", destination) :
                new ObjectParameter("destination", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("fillLookups", sourceParameter, destinationParameter);
        }
    
        public virtual int updateSubCompany(Nullable<int> flag, Nullable<int> clear)
        {
            var flagParameter = flag.HasValue ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(int));
    
            var clearParameter = clear.HasValue ?
                new ObjectParameter("clear", clear) :
                new ObjectParameter("clear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateSubCompany", flagParameter, clearParameter);
        }
    
        [DbFunction("AccountingEntities", "vJournalParents")]
        public virtual IQueryable<vJournalParents> vJournalParents(Nullable<int> year, string type)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<vJournalParents>("[AccountingEntities].[vJournalParents](@year, @type)", yearParameter, typeParameter);
        }
    
        public virtual ObjectResult<AccountBalance> AccountBalance(Nullable<int> year, string fromAccount, string toAccount, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> currencyID, Nullable<bool> skipZeros)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var fromAccountParameter = fromAccount != null ?
                new ObjectParameter("FromAccount", fromAccount) :
                new ObjectParameter("FromAccount", typeof(string));
    
            var toAccountParameter = toAccount != null ?
                new ObjectParameter("ToAccount", toAccount) :
                new ObjectParameter("ToAccount", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var skipZerosParameter = skipZeros.HasValue ?
                new ObjectParameter("SkipZeros", skipZeros) :
                new ObjectParameter("SkipZeros", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountBalance>("AccountBalance", yearParameter, fromAccountParameter, toAccountParameter, fromDateParameter, toDateParameter, currencyIDParameter, skipZerosParameter);
        }
    
        public virtual ObjectResult<ExchangeDifference> ExchangeDifference(Nullable<int> year, Nullable<System.DateTime> tillDate, Nullable<int> currencyID, Nullable<int> beforeClosing, Nullable<int> local1st, Nullable<int> local2nd)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var beforeClosingParameter = beforeClosing.HasValue ?
                new ObjectParameter("BeforeClosing", beforeClosing) :
                new ObjectParameter("BeforeClosing", typeof(int));
    
            var local1stParameter = local1st.HasValue ?
                new ObjectParameter("Local1st", local1st) :
                new ObjectParameter("Local1st", typeof(int));
    
            var local2ndParameter = local2nd.HasValue ?
                new ObjectParameter("Local2nd", local2nd) :
                new ObjectParameter("Local2nd", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExchangeDifference>("ExchangeDifference", yearParameter, tillDateParameter, currencyIDParameter, beforeClosingParameter, local1stParameter, local2ndParameter);
        }
    
        public virtual ObjectResult<ProfitAndLoss> ProfitAndLoss(Nullable<int> year, Nullable<int> level, Nullable<int> fromMonth, Nullable<int> toMonth, Nullable<int> currency, Nullable<int> beforeClosing)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(int));
    
            var fromMonthParameter = fromMonth.HasValue ?
                new ObjectParameter("FromMonth", fromMonth) :
                new ObjectParameter("FromMonth", typeof(int));
    
            var toMonthParameter = toMonth.HasValue ?
                new ObjectParameter("ToMonth", toMonth) :
                new ObjectParameter("ToMonth", typeof(int));
    
            var currencyParameter = currency.HasValue ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(int));
    
            var beforeClosingParameter = beforeClosing.HasValue ?
                new ObjectParameter("BeforeClosing", beforeClosing) :
                new ObjectParameter("BeforeClosing", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProfitAndLoss>("ProfitAndLoss", yearParameter, levelParameter, fromMonthParameter, toMonthParameter, currencyParameter, beforeClosingParameter);
        }
    
        public virtual ObjectResult<getAccountBalances> getAccountBalances(string accountYearCurrency)
        {
            var accountYearCurrencyParameter = accountYearCurrency != null ?
                new ObjectParameter("AccountYearCurrency", accountYearCurrency) :
                new ObjectParameter("AccountYearCurrency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAccountBalances>("getAccountBalances", accountYearCurrencyParameter);
        }
    
        public virtual ObjectResult<getUserInfo> getUserInfo(Nullable<int> cID, Nullable<int> mID)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("cID", cID) :
                new ObjectParameter("cID", typeof(int));
    
            var mIDParameter = mID.HasValue ?
                new ObjectParameter("mID", mID) :
                new ObjectParameter("mID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUserInfo>("getUserInfo", cIDParameter, mIDParameter);
        }
    
        public virtual ObjectResult<StatementOfAccount> StatementOfAccount(string fromAccount, string toAccount, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> currencyID)
        {
            var fromAccountParameter = fromAccount != null ?
                new ObjectParameter("FromAccount", fromAccount) :
                new ObjectParameter("FromAccount", typeof(string));
    
            var toAccountParameter = toAccount != null ?
                new ObjectParameter("ToAccount", toAccount) :
                new ObjectParameter("ToAccount", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StatementOfAccount>("StatementOfAccount", fromAccountParameter, toAccountParameter, fromDateParameter, toDateParameter, currencyIDParameter);
        }
    
        public virtual ObjectResult<CashReport> CashReport(Nullable<int> year, Nullable<System.DateTime> toDate, Nullable<int> currencyID)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CashReport>("CashReport", yearParameter, toDateParameter, currencyIDParameter);
        }
    
        public virtual ObjectResult<PostDatedChequesDetailed> PostDatedChequesDetailed(Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate, Nullable<System.DateTime> adate, Nullable<int> cur1, Nullable<int> cur2, Nullable<bool> inhouse)
        {
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("fdate", fdate) :
                new ObjectParameter("fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("tdate", tdate) :
                new ObjectParameter("tdate", typeof(System.DateTime));
    
            var adateParameter = adate.HasValue ?
                new ObjectParameter("adate", adate) :
                new ObjectParameter("adate", typeof(System.DateTime));
    
            var cur1Parameter = cur1.HasValue ?
                new ObjectParameter("Cur1", cur1) :
                new ObjectParameter("Cur1", typeof(int));
    
            var cur2Parameter = cur2.HasValue ?
                new ObjectParameter("Cur2", cur2) :
                new ObjectParameter("Cur2", typeof(int));
    
            var inhouseParameter = inhouse.HasValue ?
                new ObjectParameter("Inhouse", inhouse) :
                new ObjectParameter("Inhouse", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PostDatedChequesDetailed>("PostDatedChequesDetailed", fdateParameter, tdateParameter, adateParameter, cur1Parameter, cur2Parameter, inhouseParameter);
        }
    
        public virtual ObjectResult<Bank_Reconciliation> Bank_Reconciliation(Nullable<int> accountID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> currencyID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Bank_Reconciliation>("Bank_Reconciliation", accountIDParameter, fromDateParameter, toDateParameter, currencyIDParameter);
        }
    
        public virtual ObjectResult<Treasury> Treasury(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Treasury>("Treasury", dateParameter);
        }
    
        public virtual ObjectResult<AdvancedSearch> AdvancedSearch(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AdvancedSearch>("AdvancedSearch", yearParameter);
        }
    
        public virtual ObjectResult<TrialBalance> TrialBalance(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> currencyID, Nullable<bool> beforeClosing, Nullable<int> level)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var beforeClosingParameter = beforeClosing.HasValue ?
                new ObjectParameter("BeforeClosing", beforeClosing) :
                new ObjectParameter("BeforeClosing", typeof(bool));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TrialBalance>("TrialBalance", fromDateParameter, toDateParameter, currencyIDParameter, beforeClosingParameter, levelParameter);
        }
    
        public virtual ObjectResult<JournalNormal> JournalNormal(Nullable<int> year, Nullable<int> accountID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> voucherTypeID, Nullable<int> fromRef, Nullable<int> toRef)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var voucherTypeIDParameter = voucherTypeID.HasValue ?
                new ObjectParameter("VoucherTypeID", voucherTypeID) :
                new ObjectParameter("VoucherTypeID", typeof(int));
    
            var fromRefParameter = fromRef.HasValue ?
                new ObjectParameter("FromRef", fromRef) :
                new ObjectParameter("FromRef", typeof(int));
    
            var toRefParameter = toRef.HasValue ?
                new ObjectParameter("ToRef", toRef) :
                new ObjectParameter("ToRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JournalNormal>("JournalNormal", yearParameter, accountIDParameter, fromDateParameter, toDateParameter, voucherTypeIDParameter, fromRefParameter, toRefParameter);
        }
    
        public virtual ObjectResult<JournalOfficial> JournalOfficial(Nullable<int> year, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JournalOfficial>("JournalOfficial", yearParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<JournalVouchers> JournalVouchers(Nullable<int> year, Nullable<int> accountID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> voucherTypeID, Nullable<int> fromRef, Nullable<int> toRef)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var voucherTypeIDParameter = voucherTypeID.HasValue ?
                new ObjectParameter("VoucherTypeID", voucherTypeID) :
                new ObjectParameter("VoucherTypeID", typeof(int));
    
            var fromRefParameter = fromRef.HasValue ?
                new ObjectParameter("FromRef", fromRef) :
                new ObjectParameter("FromRef", typeof(int));
    
            var toRefParameter = toRef.HasValue ?
                new ObjectParameter("ToRef", toRef) :
                new ObjectParameter("ToRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JournalVouchers>("JournalVouchers", yearParameter, accountIDParameter, fromDateParameter, toDateParameter, voucherTypeIDParameter, fromRefParameter, toRefParameter);
        }
    
        public virtual ObjectResult<UncollectedCheques> UncollectedCheques(Nullable<System.DateTime> toDate, Nullable<int> accountid)
        {
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var accountidParameter = accountid.HasValue ?
                new ObjectParameter("Accountid", accountid) :
                new ObjectParameter("Accountid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UncollectedCheques>("UncollectedCheques", toDateParameter, accountidParameter);
        }
    
        public virtual ObjectResult<NotesReceivables> NotesReceivables(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> tillDate, Nullable<int> accountid, Nullable<int> currencyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var accountidParameter = accountid.HasValue ?
                new ObjectParameter("Accountid", accountid) :
                new ObjectParameter("Accountid", typeof(int));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotesReceivables>("NotesReceivables", fromDateParameter, toDateParameter, tillDateParameter, accountidParameter, currencyIDParameter);
        }
    
        public virtual ObjectResult<CheckerEditedHours_Result1> CheckerEditedHours(Nullable<int> accountid, Nullable<int> typeid, Nullable<int> userid, string amount, Nullable<int> year)
        {
            var accountidParameter = accountid.HasValue ?
                new ObjectParameter("Accountid", accountid) :
                new ObjectParameter("Accountid", typeof(int));
    
            var typeidParameter = typeid.HasValue ?
                new ObjectParameter("Typeid", typeid) :
                new ObjectParameter("Typeid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckerEditedHours_Result1>("CheckerEditedHours", accountidParameter, typeidParameter, useridParameter, amountParameter, yearParameter);
        }
    
        public virtual ObjectResult<PostDatedChequesInstant_Result> PostDatedChequesInstant(Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate, Nullable<System.DateTime> adate, Nullable<int> cur1, Nullable<int> cur2)
        {
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("fdate", fdate) :
                new ObjectParameter("fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("tdate", tdate) :
                new ObjectParameter("tdate", typeof(System.DateTime));
    
            var adateParameter = adate.HasValue ?
                new ObjectParameter("adate", adate) :
                new ObjectParameter("adate", typeof(System.DateTime));
    
            var cur1Parameter = cur1.HasValue ?
                new ObjectParameter("Cur1", cur1) :
                new ObjectParameter("Cur1", typeof(int));
    
            var cur2Parameter = cur2.HasValue ?
                new ObjectParameter("Cur2", cur2) :
                new ObjectParameter("Cur2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PostDatedChequesInstant_Result>("PostDatedChequesInstant", fdateParameter, tdateParameter, adateParameter, cur1Parameter, cur2Parameter);
        }
    }
}
